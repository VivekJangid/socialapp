{"ast":null,"code":"var _jsxFileName = \"/home/vivek/Desktop/repoMern/socialapp/frontend/src/components/profile/ProfileGithub.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getGithubRepos } from '../../actions/profile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileGithub = ({\n  username,\n  getGithubRepos,\n  repos\n}) => {\n  _s();\n\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos(username)]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-github\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-primary my-1\",\n      children: \"Github Repos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), repos == null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 22\n    }, this) : repos.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"repo bg-whitr\"\n    }, repo._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 27\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileGithub, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ProfileGithub;\nProfileGithub.propTypes = {\n  username: PropTypes.string.isRequired,\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileGithub\");","map":{"version":3,"sources":["/home/vivek/Desktop/repoMern/socialapp/frontend/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","PropTypes","connect","Spinner","getGithubRepos","ProfileGithub","username","repos","map","repo","_id","propTypes","string","isRequired","func","array","mapStateToProps","state","profile"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYF,EAAAA,cAAZ;AAA4BG,EAAAA;AAA5B,CAAD,KAAyC;AAAA;;AAC7DP,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,cAAc,CAACE,QAAD,CAAd;AACD,GAFQ,EAEN,CAACF,cAAc,CAACE,QAAD,CAAf,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,KAAK,IAAE,IAAP,gBAAc,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAd,GACCA,KAAK,CAACC,GAAN,CAAUC,IAAI,iBAAI;AAAoB,MAAA,SAAS,EAAC;AAA9B,OAAUA,IAAI,CAACC,GAAf;AAAA;AAAA;AAAA;AAAA,YAAlB,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAbD;;GAAML,a;;KAAAA,a;AAeNA,aAAa,CAACM,SAAd,GAA0B;AACxBL,EAAAA,QAAQ,EAAEL,SAAS,CAACW,MAAV,CAAiBC,UADH;AAExBT,EAAAA,cAAc,EAAEH,SAAS,CAACa,IAAV,CAAeD,UAFP;AAGxBN,EAAAA,KAAK,EAAEN,SAAS,CAACc,KAAV,CAAgBF;AAHC,CAA1B;;AAMA,MAAMG,eAAe,GAAIC,KAAD,KAAY;AAClCV,EAAAA,KAAK,EAAEU,KAAK,CAACC,OAAN,CAAcX;AADa,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACc,eAAD,EAAkB;AAAEZ,EAAAA;AAAF,CAAlB,CAAP,CAA6CC,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getGithubRepos } from '../../actions/profile';\n\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos(username)]);\n\n  return (\n    <div className='profile-github'>\n      <h2 className='text-primary my-1'>Github Repos</h2>\n      {repos==null ? <Spinner/> : (\n        repos.map(repo => <div key={repo._id} className=\"repo bg-whitr\"></div>)\n      )}\n    </div>\n  );\n};\n\nProfileGithub.propTypes = {\n  username: PropTypes.string.isRequired,\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  repos: state.profile.repos,\n});\n\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\n"]},"metadata":{},"sourceType":"module"}