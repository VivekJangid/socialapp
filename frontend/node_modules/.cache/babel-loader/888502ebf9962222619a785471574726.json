{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  console.log('HELLO');\n\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //RegisterUser\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser);\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser);\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/vivek/Desktop/repoMern/socialapp/frontend/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","setAlert","setAuthToken","loadUser","dispatch","console","log","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n} from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\n\n//Load User\nexport const loadUser = () => async (dispatch) => {\n  console.log('HELLO');\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({ type: USER_LOADED, payload: res.data });\n  } catch (err) {\n    dispatch({ type: AUTH_ERROR });\n  }\n};\n\n//RegisterUser\nexport const register = ({ name, email, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n    dispatch(loadUser);\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({ type: REGISTER_FAIL });\n  }\n};\n\n//Login User\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({ type: LOGIN_SUCCESS, payload: res.data });\n    dispatch(loadUser);\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({ type: LOGIN_FAIL });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}